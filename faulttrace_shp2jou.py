#!/usr/bin/env python3

import os
import argparse
import numpy as np
import matplotlib
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D
from scipy.interpolate import griddata
import pandas as pd
import geopandas as gp
import convert_latlon2EQdist as conv
import utm

'''
__author__ = "Magali Barba"
__maintainer__ = "Magali Barba"
__email__ = "magali.barba@colorado.edu"

Usage: 
./faulttrace_shp2jou.py -i RidgecrestSurfaceRuptures_downloaded.shp -lat 35.7665 -lon -117.6048
'''

def parse():
    parser = argparse.ArgumentParser()
    parser.add_argument('-i', action='store', default=None, dest='fname',help="Input shapefile",type=str)
    parser.add_argument('-lat', action='store', default=None, dest='lat',help="Earthquake latitude",type=float)
    parser.add_argument('-lon', action='store', default=None, dest='lon',help="Earthquake longitude",type=float)
    inps = parser.parse_args()
    return inps

if __name__ == '__main__':

    inps = parse()
    
    ################################################################
    # Define EQ parameters
    ################################################################
    eq_lat= inps.lat
    eq_lon= inps.lon
    eq_utm_x,eq_utm_y,zone_num,zone_let = utm.from_latlon(eq_lat,eq_lon)

    ################################################################
    # Load faults from shapefile
    ################################################################
    fault_fname = inps.fname
    faults = gp.GeoDataFrame.from_file(fault_fname)

    ################################################################
    # Prepare CUBIT journal File
    ################################################################
    journal_fname = str(os.path.splitext(os.path.basename(fault_fname))[0])+'.jou'
    j = open(journal_fname, 'w')
    j.write("# CUBIT journal file generated by faulttrace_shp2jou.py.\n" + \
                "#\n" + \
                "# ----------------------------------------------------------\n" + \
                "reset\n")

    for line in faults['geometry']:
        coords = list(line.coords)
        fault_lat, fault_lon = [],[]

        for ii in range(len(coords)):
            fault_lat.append(coords[ii][1])
            fault_lon.append(coords[ii][0])

        fault_x,fault_y= conv.latlon2EQdist(eq_lat,eq_lon,fault_lat,fault_lon)
        
        j.write("${idBeg=Id('vertex')}\n")

        for ff in range(len(fault_x)):
            j.write("create vertex x %10.2e y %10.2e z %10.2e\n" % (fault_x[ff]/1000, fault_y[ff]/1000, 0.))
            if 0 == ff:
                j.write("${idBeg=Id('vertex')}\n")

        j.write("${idEnd=Id('vertex')}\n")
        j.write("create curve spline vertex {idBeg} to {idEnd} delete\n")





